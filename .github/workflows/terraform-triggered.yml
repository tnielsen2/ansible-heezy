name: Terraform Provisioning

on:
  workflow_dispatch:
    inputs:
      target_hosts:
        description: 'Target hosts (comma-separated IPs or inventory group)'
        required: true
        type: string
      playbooks:
        description: 'Playbooks to execute (comma-separated, e.g. baseline,github-runner)'
        required: true
        type: string
        default: baseline

permissions:
  id-token: write
  contents: read

jobs:
  setup-aws:
    uses: ./.github/workflows/_setup-runner-aws-credentials.yml
    with:
      runner-type: ubuntu-latest
    secrets: inherit

  provision:
    needs: setup-aws
    runs-on: self-hosted
    container:
      image: 025066240222.dkr.ecr.us-east-2.amazonaws.com/ansible-automation:main-x86
      credentials:
        username: AWS
        password: ${{ needs.setup-aws.outputs.ecr-token }}
    timeout-minutes: 60
    steps:
      - name: Run playbook
        env:
          AWS_ACCESS_KEY_ID: ${{ needs.setup-aws.outputs.runner-access-key }}
          AWS_SECRET_ACCESS_KEY: ${{ needs.setup-aws.outputs.runner-secret-key }}
          AWS_DEFAULT_REGION: us-east-2
        run: |
          # Assume role using static runner credentials
          CREDS=$(aws sts assume-role --role-arn arn:aws:iam::025066240222:role/GitHubActions-MultiRepo --role-session-name ansible-session)
          
          # Extract and mask credentials
          ASSUMED_ACCESS_KEY=$(echo $CREDS | jq -r '.Credentials.AccessKeyId')
          ASSUMED_SECRET_KEY=$(echo $CREDS | jq -r '.Credentials.SecretAccessKey')
          ASSUMED_SESSION_TOKEN=$(echo $CREDS | jq -r '.Credentials.SessionToken')
          
          echo "::add-mask::$ASSUMED_ACCESS_KEY"
          echo "::add-mask::$ASSUMED_SECRET_KEY"
          echo "::add-mask::$ASSUMED_SESSION_TOKEN"
          
          # Export assumed role credentials
          export AWS_ACCESS_KEY_ID="$ASSUMED_ACCESS_KEY"
          export AWS_SECRET_ACCESS_KEY="$ASSUMED_SECRET_KEY"
          export AWS_SESSION_TOKEN="$ASSUMED_SESSION_TOKEN"
          
          # Create dynamic inventory for target hosts
          mkdir -p /tmp/inventory
          TARGET_HOSTS="${{ github.event.inputs.target_hosts }}"
          PLAYBOOKS="${{ github.event.inputs.playbooks }}"
          
          # Start inventory with [all] group
          echo "[all]" > /tmp/inventory/dynamic_hosts
          echo "$TARGET_HOSTS" | tr ',' '\n' >> /tmp/inventory/dynamic_hosts
          echo "" >> /tmp/inventory/dynamic_hosts
          
          # Create groups for each playbook (except baseline)
          echo "$PLAYBOOKS" | tr ',' '\n' | while read playbook; do
            if [ -n "$playbook" ] && [ "$playbook" != "baseline" ]; then
              echo "[$playbook]" >> /tmp/inventory/dynamic_hosts
              echo "$TARGET_HOSTS" | tr ',' '\n' >> /tmp/inventory/dynamic_hosts
              echo "" >> /tmp/inventory/dynamic_hosts
            fi
          done
          
          # Add variables
          echo "[all:vars]" >> /tmp/inventory/dynamic_hosts
          echo "ansible_user={{ lookup('aws_secret', 'production/heezy/ubuntu/cloud-init-credentials', region='us-east-2') | from_json | json_query('username') }}" >> /tmp/inventory/dynamic_hosts
          echo "ansible_password={{ lookup('aws_secret', 'production/heezy/ubuntu/cloud-init-credentials', region='us-east-2') | from_json | json_query('password') }}" >> /tmp/inventory/dynamic_hosts
          echo "ansible_become_password={{ lookup('aws_secret', 'production/heezy/ubuntu/cloud-init-credentials', region='us-east-2') | from_json | json_query('password') }}" >> /tmp/inventory/dynamic_hosts
          
          # Run playbooks in sequence
          PLAYBOOKS="${{ github.event.inputs.playbooks }}"
          echo "$PLAYBOOKS" | tr ',' '\n' | while read playbook; do
            if [ -n "$playbook" ]; then
              echo "Running playbook: $playbook"
              ANSIBLE_CONFIG=/ansible/ansible.cfg ANSIBLE_ROLES_PATH=/ansible/roles ANSIBLE_HOST_KEY_CHECKING=False ansible-playbook -i /tmp/inventory/dynamic_hosts --limit all /ansible/playbooks/$playbook.yml
            fi
          done
