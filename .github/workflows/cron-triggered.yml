name: Cron Triggered Deployment

on:
  schedule:
    # Baseline: Daily at midnight UTC-4 (4 AM UTC)
    - cron: '0 4 * * *'
    # Prometheus: Daily at 1 AM UTC-4 (5 AM UTC)
    - cron: '0 5 * * *'
    # GitHub Runner: Daily at 2 AM UTC-4 (6 AM UTC)
    - cron: '0 6 * * *'

permissions:
  id-token: write
  contents: read

concurrency:
  group: ansible-cron-deployment
  cancel-in-progress: false

jobs:
  setup-aws:
    uses: ./.github/workflows/_setup-runner-aws-credentials.yml
    with:
      runner-type: ubuntu-latest
    secrets: inherit

  deploy:
    needs: [setup-aws]
    runs-on: self-hosted
    container:
      image: 025066240222.dkr.ecr.us-east-2.amazonaws.com/ansible-automation:main
      credentials:
        username: AWS
        password: ${{ needs.setup-aws.outputs.ecr-token }}
    timeout-minutes: 60
    strategy:
      matrix:
        playbook: [
          { name: "baseline", condition: "${{ github.event.schedule == '0 4 * * *' }}" },
          { name: "prometheus", condition: "${{ github.event.schedule == '0 5 * * *' }}" },
          { name: "github-runner", condition: "${{ github.event.schedule == '0 6 * * *' }}" }
        ]
      fail-fast: false
    steps:
      - name: Run ${{ matrix.playbook.name }} playbook
        if: ${{ matrix.playbook.condition }}
        env:
          AWS_ACCESS_KEY_ID: ${{ needs.setup-aws.outputs.runner-access-key }}
          AWS_SECRET_ACCESS_KEY: ${{ needs.setup-aws.outputs.runner-secret-key }}
          AWS_DEFAULT_REGION: us-east-2
        run: |
          # Assume role using static runner credentials
          CREDS=$(aws sts assume-role --role-arn arn:aws:iam::025066240222:role/GitHubActions-MultiRepo --role-session-name ansible-session)
          
          # Extract and mask credentials
          ASSUMED_ACCESS_KEY=$(echo $CREDS | jq -r '.Credentials.AccessKeyId')
          ASSUMED_SECRET_KEY=$(echo $CREDS | jq -r '.Credentials.SecretAccessKey')
          ASSUMED_SESSION_TOKEN=$(echo $CREDS | jq -r '.Credentials.SessionToken')
          
          echo "::add-mask::$ASSUMED_ACCESS_KEY"
          echo "::add-mask::$ASSUMED_SECRET_KEY"
          echo "::add-mask::$ASSUMED_SESSION_TOKEN"
          
          # Export assumed role credentials
          export AWS_ACCESS_KEY_ID="$ASSUMED_ACCESS_KEY"
          export AWS_SECRET_ACCESS_KEY="$ASSUMED_SECRET_KEY"
          export AWS_SESSION_TOKEN="$ASSUMED_SESSION_TOKEN"
          
          # Run Ansible with assumed role credentials
          ANSIBLE_CONFIG=/ansible/ansible.cfg ANSIBLE_ROLES_PATH=/ansible/roles ANSIBLE_HOST_KEY_CHECKING=False ansible-playbook -i /ansible/inventory/hosts.heezy /ansible/playbooks/${{ matrix.playbook.name }}.yml

  notify:
    if: always()
    needs: [deploy]
    uses: ./.github/workflows/_discord-notify.yml
    with:
      status: ${{ needs.deploy.result == 'success' && 'success' || 'failure' }}
      workflow-name: 'Cron Triggered Deployment'
    secrets: inherit
