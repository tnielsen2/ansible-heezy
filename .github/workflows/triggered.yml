name: Triggered Deployment

on:
  push:
    branches: [main]
    paths:
      - 'inventory/**'
      - 'roles/baseline/**'
      - 'roles/prometheus/**'
      - 'roles/github-runner/**'
      - 'playbooks/baseline.yml'
      - 'playbooks/prometheus.yml'
      - 'playbooks/github-runner.yml'
      - '.github/workflows/triggered.yml'
  workflow_dispatch:
    inputs:
      playbook:
        description: 'Playbook to run'
        required: false
        type: choice
        options:
          - all
          - baseline
          - prometheus
          - github-runner
        default: all

permissions:
  id-token: write
  contents: read

concurrency:
  group: ansible-deployment
  cancel-in-progress: false

jobs:
  setup-aws:
    uses: ./.github/workflows/_setup-runner-aws-credentials.yml
    with:
      runner-type: ubuntu-latest
    secrets: inherit

  detect-changes:
    runs-on: ubuntu-latest
    outputs:
      baseline: ${{ steps.changes.outputs.baseline }}
      prometheus: ${{ steps.changes.outputs.prometheus }}
      github-runner: ${{ steps.changes.outputs.github-runner }}
    steps:
      - uses: actions/checkout@v4
      - uses: dorny/paths-filter@v2
        id: changes
        with:
          filters: |
            baseline:
              - 'inventory/**'
              - 'roles/baseline/**'
              - 'playbooks/baseline.yml'
            prometheus:
              - 'inventory/**'
              - 'roles/prometheus/**'
              - 'playbooks/prometheus.yml'
            github-runner:
              - 'inventory/**'
              - 'roles/github-runner/**'
              - 'playbooks/github-runner.yml'

  build-local:
    needs: [setup-aws, detect-changes]
    runs-on: self-hosted
    outputs:
      should-deploy: ${{ steps.check.outputs.should-deploy }}
    steps:
      - uses: actions/checkout@v4
      - name: Check if deployment needed
        id: check
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" || \
                "${{ needs.detect-changes.outputs.baseline }}" == "true" || \
                "${{ needs.detect-changes.outputs.prometheus }}" == "true" || \
                "${{ needs.detect-changes.outputs.github-runner }}" == "true" ]]; then
            echo "should-deploy=true" >> $GITHUB_OUTPUT
          else
            echo "should-deploy=false" >> $GITHUB_OUTPUT
          fi
      - name: Build Ansible container
        if: steps.check.outputs.should-deploy == 'true'
        run: |
          docker build -t ansible-automation:local .

  deploy:
    needs: [setup-aws, detect-changes, build-local]
    if: needs.build-local.outputs.should-deploy == 'true'
    runs-on: self-hosted
    container:
      image: ansible-automation:local
      env:
        AWS_ACCESS_KEY_ID: ${{ needs.setup-aws.outputs.runner-access-key }}
        AWS_SECRET_ACCESS_KEY: ${{ needs.setup-aws.outputs.runner-secret-key }}
        AWS_DEFAULT_REGION: us-east-2
    timeout-minutes: 60
    strategy:
      matrix:
        playbook: [
          { name: "baseline", condition: "${{ needs.detect-changes.outputs.baseline == 'true' || github.event.inputs.playbook == 'all' || github.event.inputs.playbook == 'baseline' }}" },
          { name: "prometheus", condition: "${{ needs.detect-changes.outputs.prometheus == 'true' || github.event.inputs.playbook == 'all' || github.event.inputs.playbook == 'prometheus' }}" },
          { name: "github-runner", condition: "${{ needs.detect-changes.outputs.github-runner == 'true' || github.event.inputs.playbook == 'all' || github.event.inputs.playbook == 'github-runner' }}" }
        ]
      fail-fast: false
    steps:
      - name: Assume AWS role and run playbook
        if: ${{ matrix.playbook.condition }}
        run: |
          # Assume role using static credentials
          CREDS=$(aws sts assume-role --role-arn arn:aws:iam::${{ secrets.PROD_AWS_ACCOUNT_NUMBER }}:role/GitHubActions-MultiRepo --role-session-name ansible-session)
          
          # Export assumed role credentials
          export AWS_ACCESS_KEY_ID=$(echo $CREDS | jq -r '.Credentials.AccessKeyId')
          export AWS_SECRET_ACCESS_KEY=$(echo $CREDS | jq -r '.Credentials.SecretAccessKey')
          export AWS_SESSION_TOKEN=$(echo $CREDS | jq -r '.Credentials.SessionToken')
          
          # Run Ansible with assumed role credentials
          ansible-playbook -i /ansible/inventory/hosts.heezy /ansible/playbooks/${{ matrix.playbook.name }}.yml

  notify:
    if: always()
    needs: [deploy]
    uses: ./.github/workflows/_discord-notify.yml
    with:
      status: ${{ needs.deploy.result == 'success' && 'success' || 'failure' }}
      workflow-name: 'Triggered Deployment'
    secrets: inherit
