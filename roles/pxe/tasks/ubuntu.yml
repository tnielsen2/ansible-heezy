#SPDX-License-Identifier: MIT-0
---
- name: Create PXE directories
  file:
    path: "{{ item }}"
    state: directory
    mode: '0755'
  loop:
    - /opt/pxe/tftp
    - /opt/pxe/http
    - /opt/pxe/logs

- name: Download iPXE EFI bootloader
  get_url:
    url: "http://boot.ipxe.org/ipxe.efi"
    dest: /opt/pxe/tftp/ipxe.efi
    mode: '0644'

- name: Create iPXE boot script for Talos
  copy:
    content: |
      #!ipxe
      kernel http://192.168.1.28/vmlinuz-amd64 talos.platform=metal slab_nomerge pti=on console=tty0 console=ttyS0,115200 talos.config=http://192.168.1.28/talos-config.yaml
      initrd http://192.168.1.28/initramfs-amd64.xz
      boot
    dest: /opt/pxe/tftp/boot.ipxe
    mode: '0644'

- name: Copy Talos kernel and initramfs to HTTP directory
  copy:
    src: "{{ item.src }}"
    dest: "{{ item.dest }}"
    mode: '0644'
  loop:
    - src: "vmlinuz-amd64"
      dest: "/opt/pxe/http/vmlinuz-amd64"
    - src: "initramfs-amd64.xz"
      dest: "/opt/pxe/http/initramfs-amd64.xz"

- name: Create docker-compose for TFTP and HTTP servers
  copy:
    content: |
      services:
        tftp-server:
          image: pghalliday/tftp
          container_name: tftp-server
          restart: unless-stopped
          volumes:
            - /opt/pxe/tftp:/var/tftpboot
          ports:
            - "69:69/udp"
          logging:
            driver: "json-file"
            options:
              max-size: "10m"
              max-file: "3"
        
        http-server:
          image: nginx:alpine
          container_name: http-server
          restart: unless-stopped
          volumes:
            - /opt/pxe/http:/usr/share/nginx/html
          ports:
            - "80:80/tcp"
          logging:
            driver: "json-file"
            options:
              max-size: "10m"
              max-file: "3"
    dest: /opt/pxe/docker-compose.yml
    mode: '0644'

- name: Create systemd service for PXE servers
  copy:
    content: |
      [Unit]
      Description=PXE Boot Servers (TFTP + HTTP)
      Requires=docker.service
      After=docker.service

      [Service]
      Type=oneshot
      RemainAfterExit=yes
      WorkingDirectory=/opt/pxe
      ExecStart=/usr/bin/docker compose up -d
      ExecStop=/usr/bin/docker compose down
      TimeoutStartSec=0

      [Install]
      WantedBy=multi-user.target
    dest: /etc/systemd/system/pxe-server.service
    mode: '0644'
  notify: reload systemd

- name: Start and enable PXE server service
  systemd:
    name: pxe-server
    state: started
    enabled: yes
    daemon_reload: yes

- name: Configure firewall for PXE services
  ufw:
    rule: allow
    port: "{{ item.port }}"
    proto: "{{ item.proto }}"
  loop:
    - { port: "69", proto: "udp" }
    - { port: "80", proto: "tcp" }