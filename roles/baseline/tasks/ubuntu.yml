---
- name: Set hostname with hostnamectl
  command: hostnamectl set-hostname {{ hostname }}
  when: hostname is defined

- name: Update /etc/hosts with hostname
  lineinfile:
    path: /etc/hosts
    line: "127.0.1.1 {{ hostname }}.{{ dns_domain | default('heezy.local') }} {{ hostname }}"
    regexp: '^127\.0\.1\.1'
  when: hostname is defined

- name: Update package cache (Debian/Ubuntu)
  apt:
    update_cache: yes
  when: ansible_os_family == "Debian"

- name: Update package cache (RedHat/CentOS)
  yum:
    update_cache: yes
  when: ansible_os_family == "RedHat"

- name: Install common tools (Debian/Ubuntu)
  apt:
    name:
      - vim
      - curl
      - wget
      - zip
      - unzip
      - git
      - htop
      - tree
      - jq
      - tftp-hpa
      - net-tools
    state: present
  when: ansible_os_family == "Debian"

- name: Install common tools (RedHat/CentOS)
  yum:
    name:
      - vim
      - curl
      - wget
      - zip
      - unzip
      - git
      - htop
      - tree
    state: present
  when: ansible_os_family == "RedHat"

- name: Install Docker (Debian/Ubuntu)
  block:
    - name: Add Docker GPG key
      apt_key:
        url: https://download.docker.com/linux/ubuntu/gpg
        state: present
    - name: Add Docker repository
      apt_repository:
        repo: "deb [arch=amd64] https://download.docker.com/linux/ubuntu {{ ansible_distribution_release }} stable"
        state: present
    - name: Install Docker
      apt:
        name:
          - docker-ce
          - docker-ce-cli
          - containerd.io
          - docker-compose-plugin
        state: present
        update_cache: yes
    - name: Start and enable Docker
      systemd:
        name: docker
        state: started
        enabled: yes
    - name: Add user to docker group
      user:
        name: "{{ ansible_user }}"
        groups: docker
        append: yes
  when: ansible_os_family == "Debian"

- name: Check if AWS CLI is installed
  command: which aws
  register: aws_cli_check
  failed_when: false
  changed_when: false

- name: Install AWS CLI
  block:
    - name: Download AWS CLI
      get_url:
        url: "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip"
        dest: "/tmp/awscliv2.zip"
    - name: Extract AWS CLI
      unarchive:
        src: "/tmp/awscliv2.zip"
        dest: "/tmp"
        remote_src: yes
    - name: Install AWS CLI
      command: /tmp/aws/install
      args:
        creates: /usr/local/bin/aws
  when: aws_cli_check.rc != 0

- name: Install Prometheus Node Exporter
  block:
    - name: Create prometheus user
      user:
        name: prometheus
        system: yes
        shell: /bin/false
        home: /var/lib/prometheus
        create_home: no
        state: present
    - name: Download Node Exporter
      get_url:
        url: "https://github.com/prometheus/node_exporter/releases/download/v1.6.1/node_exporter-1.6.1.linux-amd64.tar.gz"
        dest: "/tmp/node_exporter.tar.gz"
    - name: Extract Node Exporter
      unarchive:
        src: "/tmp/node_exporter.tar.gz"
        dest: "/tmp"
        remote_src: yes
    - name: Copy Node Exporter binary
      copy:
        src: "/tmp/node_exporter-1.6.1.linux-amd64/node_exporter"
        dest: "/usr/local/bin/node_exporter"
        mode: '0755'
        owner: prometheus
        group: prometheus
        remote_src: yes
    - name: Create systemd service
      copy:
        content: |
          [Unit]
          Description=Node Exporter
          After=network.target

          [Service]
          User=prometheus
          Group=prometheus
          Type=simple
          ExecStart=/usr/local/bin/node_exporter

          [Install]
          WantedBy=multi-user.target
        dest: /etc/systemd/system/node_exporter.service
    - name: Start and enable Node Exporter
      systemd:
        name: node_exporter
        state: started
        enabled: yes
        daemon_reload: yes

- name: Install Promtail for log shipping
  block:
    - name: Download Promtail
      get_url:
        url: "https://github.com/grafana/loki/releases/download/v3.5.3/promtail-linux-amd64.zip"
        dest: "/tmp/promtail.zip"
    - name: Extract Promtail
      unarchive:
        src: "/tmp/promtail.zip"
        dest: "/tmp"
        remote_src: yes
    - name: Copy Promtail binary
      copy:
        src: "/tmp/promtail-linux-amd64"
        dest: "/usr/local/bin/promtail"
        mode: '0755'
        owner: root
        group: root
        remote_src: yes
    - name: Create Promtail config directory
      file:
        path: /etc/promtail
        state: directory
        mode: '0755'
    - name: Create Promtail configuration
      copy:
        content: |
          server:
            http_listen_port: 9080
            grpc_listen_port: 0

          positions:
            filename: /tmp/positions.yaml

          clients:
            - url: http://{{ loki_server | default('192.168.200.2') }}:3100/loki/api/v1/push

          scrape_configs:
            - job_name: system
              static_configs:
                - targets:
                    - localhost
                  labels:
                    job: varlogs
                    __path__: /var/log/*log
                    host: "{{ ansible_hostname }}"
            - job_name: syslog
              static_configs:
                - targets:
                    - localhost
                  labels:
                    job: syslog
                    __path__: /var/log/syslog
                    host: "{{ ansible_hostname }}"
            - job_name: auth
              static_configs:
                - targets:
                    - localhost
                  labels:
                    job: auth
                    __path__: /var/log/auth.log
                    host: "{{ ansible_hostname }}"
        dest: /etc/promtail/config.yml
    - name: Create systemd service for Promtail
      copy:
        content: |
          [Unit]
          Description=Promtail service
          After=network.target

          [Service]
          Type=simple
          User=root
          ExecStart=/usr/local/bin/promtail -config.file /etc/promtail/config.yml
          Restart=on-failure
          RestartSec=20
          StandardOutput=append:/var/log/promtail.log
          StandardError=append:/var/log/promtail.log
          SyslogIdentifier=promtail

          [Install]
          WantedBy=multi-user.target
        dest: /etc/systemd/system/promtail.service
    - name: Start and enable Promtail
      systemd:
        name: promtail
        state: started
        enabled: yes
        daemon_reload: yes

- name: Configure aggressive log rotation
  copy:
    content: |
      /var/log/*.log {
        daily
        rotate 3
        compress
        delaycompress
        missingok
        notifempty
        create 644 root root
      }
      /var/log/syslog {
        daily
        rotate 3
        compress
        delaycompress
        missingok
        notifempty
        create 644 syslog adm
      }
      /var/log/auth.log {
        daily
        rotate 3
        compress
        delaycompress
        missingok
        notifempty
        create 644 root adm
      }
    dest: /etc/logrotate.d/aggressive-cleanup
    mode: '0644'

- name: Configure Docker log rotation
  copy:
    content: |
      {
        "log-driver": "json-file",
        "log-opts": {
          "max-size": "10m",
          "max-file": "3"
        }
      }
    dest: /etc/docker/daemon.json
    mode: '0644'
  notify: restart docker

- name: Create cleanup script
  copy:
    content: |
      #!/bin/bash
      # Aggressive system cleanup script
      
      # Clean package cache
      apt-get clean
      apt-get autoclean
      apt-get autoremove -y
      
      # Clean old logs (keep only 3 days)
      find /var/log -name "*.log" -mtime +3 -delete
      find /var/log -name "*.gz" -mtime +7 -delete
      journalctl --vacuum-time=3d
      
      # Clean Docker
      docker system prune -af --filter "until=24h"
      docker volume prune -f
      
      # Clean temp files
      find /tmp -type f -mtime +1 -delete
      find /var/tmp -type f -mtime +1 -delete
      
      # Clean old kernels (keep current + 1)
      apt-get autoremove --purge -y
      
      # Clean thumbnail cache
      find /home -name ".thumbnails" -type d -exec rm -rf {} + 2>/dev/null || true
      
      # Clean bash history (keep last 100 lines)
      find /home -name ".bash_history" -exec tail -n 100 {} \; > /tmp/hist && mv /tmp/hist {} 2>/dev/null || true
      
      # Clean snap cache
      snap list --all | awk '/disabled/{print $1, $3}' | while read snapname revision; do
          snap remove "$snapname" --revision="$revision" 2>/dev/null || true
      done
      
      echo "Cleanup completed: $(date)"
    dest: /usr/local/bin/system-cleanup.sh
    mode: '0755'

- name: Create daily cleanup cron job
  cron:
    name: "Daily system cleanup"
    minute: "0"
    hour: "2"
    job: "/usr/local/bin/system-cleanup.sh >> /var/log/cleanup.log 2>&1"

- name: Run initial cleanup
  command: /usr/local/bin/system-cleanup.sh
  changed_when: false