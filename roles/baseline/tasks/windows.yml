---
- name: Create temp directory
  win_file:
    path: C:\temp
    state: directory

- name: Install Chocolatey
  win_chocolatey:
    name: chocolatey
    state: present

- name: Install common tools via Chocolatey
  win_chocolatey:
    name:
      - curl
      - wget
      - 7zip
      - git
      - googlechrome
      - notepadplusplus
    state: present

- name: Check if AWS CLI is installed
  win_command: aws --version
  register: aws_cli_check_win
  failed_when: false
  changed_when: false

- name: Install AWS CLI
  win_chocolatey:
    name: awscli
    state: present
  when: aws_cli_check_win.rc != 0

# Skip Docker Desktop - not compatible with Windows Server
# - name: Install Docker Desktop
#   win_chocolatey:
#     name: docker-desktop
#     state: present

- name: Disable Windows Server Manager auto-start
  win_regedit:
    path: HKLM:\SOFTWARE\Microsoft\ServerManager
    name: DoNotOpenServerManagerAtLogon
    data: 1
    type: dword

- name: Disable IE Enhanced Security Configuration for Administrators
  win_regedit:
    path: HKLM:\SOFTWARE\Microsoft\Active Setup\Installed Components\{A509B1A7-37EF-4b3f-8CFC-4F3A74704073}
    name: IsInstalled
    data: 0
    type: dword

- name: Disable IE Enhanced Security Configuration for Users
  win_regedit:
    path: HKLM:\SOFTWARE\Microsoft\Active Setup\Installed Components\{A509B1A8-37EF-4b3f-8CFC-4F3A74704073}
    name: IsInstalled
    data: 0
    type: dword

- name: Install Tailscale
  win_chocolatey:
    name: tailscale
    state: present

- name: Enable RDP
  win_regedit:
    path: HKLM:\System\CurrentControlSet\Control\Terminal Server
    name: fDenyTSConnections
    data: 0
    type: dword

- name: Enable RDP firewall rule
  win_firewall_rule:
    name: Remote Desktop
    enabled: yes
    state: present
    protocol: tcp
    localport: 3389
    action: allow
    direction: in

- name: Add Administrator to Remote Desktop Users group
  win_group_membership:
    name: Remote Desktop Users
    members:
      - Administrator
    state: present

- name: Download and install Prometheus Windows Exporter
  block:
    - name: Download Windows Exporter
      win_get_url:
        url: "https://github.com/prometheus-community/windows_exporter/releases/download/v0.24.0/windows_exporter-0.24.0-amd64.msi"
        dest: "C:\\temp\\windows_exporter.msi"
    - name: Install Windows Exporter
      win_package:
        path: "C:\\temp\\windows_exporter.msi"
        state: present

    - name: Configure Windows Firewall
      win_firewall:
        state: enabled
        profiles:
          - domain
          - private
          - public

    - name: Disable unnecessary services
      win_service:
        name: "{{ item }}"
        state: stopped
        start_mode: disabled
      loop:
        - Fax
        - TapiSrv
      ignore_errors: yes

- name: Install Promtail for Windows log shipping
  block:
    - name: Download Promtail for Windows
      win_get_url:
        url: "https://github.com/grafana/loki/releases/download/v3.5.3/promtail-windows-amd64.exe.zip"
        dest: "C:\\temp\\promtail.zip"
    - name: Extract Promtail
      win_unzip:
        src: "C:\\temp\\promtail.zip"
        dest: "C:\\Program Files\\Promtail\\"
        creates: "C:\\Program Files\\Promtail\\promtail-windows-amd64.exe"
    - name: Create Promtail config directory
      win_file:
        path: "C:\\Program Files\\Promtail\\config"
        state: directory
    - name: Create Promtail configuration
      win_copy:
        content: |
          server:
            http_listen_port: 9080
            grpc_listen_port: 0

          positions:
            filename: C:\temp\positions.yaml

          clients:
            - url: http://{{ loki_server | default('192.168.200.2') }}:3100/loki/api/v1/push

          scrape_configs:
            - job_name: windows-system
              windows_events:
                use_incoming_timestamp: false
                bookmark_path: C:\temp\bookmark.xml
                eventlog_name: "System"
                xpath_query: '*'
                labels:
                  job: windows-system
                  host: "{{ ansible_hostname }}"
            - job_name: windows-application
              windows_events:
                use_incoming_timestamp: false
                bookmark_path: C:\temp\bookmark-app.xml
                eventlog_name: "Application"
                xpath_query: '*'
                labels:
                  job: windows-application
                  host: "{{ ansible_hostname }}"
            - job_name: windows-security
              windows_events:
                use_incoming_timestamp: false
                bookmark_path: C:\temp\bookmark-sec.xml
                eventlog_name: "Security"
                xpath_query: '*'
                labels:
                  job: windows-security
                  host: "{{ ansible_hostname }}"
        dest: "C:\\Program Files\\Promtail\\config\\config.yml"
    - name: Install Promtail as Windows service
      win_command: |
        "C:\Program Files\Promtail\promtail-windows-amd64.exe" -config.file="C:\Program Files\Promtail\config\config.yml" --windows-service install
      args:
        creates: "C:\\Windows\\System32\\promtail.exe"
    - name: Start Promtail service
      win_service:
        name: promtail
        state: started
        start_mode: auto

- name: Create Windows cleanup script
  win_copy:
    content: |
      @echo off
      REM Windows System Cleanup Script
      
      REM Clean Windows Update cache
      dism /online /cleanup-image /startcomponentcleanup /resetbase
      
      REM Clean temp files
      del /q /f /s %TEMP%\*
      del /q /f /s C:\Windows\Temp\*
      
      REM Clean Windows logs (keep only 3 days)
      forfiles /p C:\Windows\System32\winevt\Logs /c "cmd /c del @path" /m *.evtx /d -3 2>nul
      
      REM Clean IIS logs if present
      forfiles /p C:\inetpub\logs\LogFiles /s /c "cmd /c del @path" /m *.log /d -3 2>nul
      
      REM Clean Chocolatey cache
      choco cleancache 2>nul
      
      REM Clean Docker (if installed)
      docker system prune -af --filter "until=24h" 2>nul
      docker volume prune -f 2>nul
      
      REM Clean Windows Error Reporting
      del /q /f /s C:\ProgramData\Microsoft\Windows\WER\ReportQueue\* 2>nul
      
      REM Clean Windows Defender logs
      del /q /f /s "C:\ProgramData\Microsoft\Windows Defender\Scans\History\*" 2>nul
      
      REM Clean old Windows Update files
      cleanmgr /sagerun:1
      
      echo Cleanup completed: %date% %time%
    dest: C:\Scripts\system-cleanup.bat

- name: Create Scripts directory
  win_file:
    path: C:\Scripts
    state: directory

- name: Create scheduled task for daily cleanup
  win_scheduled_task:
    name: "Daily System Cleanup"
    description: "Automated system cleanup task"
    actions:
    - path: C:\Scripts\system-cleanup.bat
    triggers:
    - type: daily
      start_boundary: "2023-01-01T02:00:00"
    username: SYSTEM
    state: present
    enabled: yes

- name: Configure Windows Event Log retention
  win_regedit:
    path: "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\{{ item }}\MaxSize"
    name: MaxSize
    data: 10485760
    type: dword
  loop:
    - Application
    - System
    - Security

- name: Run initial cleanup
  win_command: C:\Scripts\system-cleanup.bat
  changed_when: false
